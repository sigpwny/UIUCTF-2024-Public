package require md5;

set input [list]
puts "Enter flag:"
foreach char [split [gets stdin] ""] {
  lappend input [scan $char "%c"]
}

set wtf [list 492636 406872 481036 456848 489619 458431 466416 482512 413259 424205 476839 441981 489662 490341 510145 428550 480326 499060 417618 486312 452152 470192 476645 496113 433471 403520 503087 467533 508246 477960 367896 408320 423790 439274 525261 462079]
set definitely_not_flag_length 36

set set set
foreach wat [list 254 109 126 66 220 98 230 17 83 106 123 57 214 225 96 113 126 47 73 32 174 224 111 153 83 78 253 164 96 208 68 49 55 195 2 84 39 66 84 47 248 189 176 135 105 99 124 92 180 102 97 213 118 94 155 34 225 76 168 131 106 69 64 75 162 58 138 22 205 146 228 15 235 155 253 236 158 180 70 109 115 154 208 134 14 255 244 103 203 182 199 129 43 186 101 183 25 178 212 56 49 12 18 209 1 51 172 117 233 48 56 219 177 86 3 67 139 149 217 103 233 98 3 139 3 243 248 222 6 9 87 14 230 211 121 198 140 182 27 38 145 189 110 74 99 116 99 193 47 237 16 133 104 109 86 46 15 59 40 153 45 177 0 163 157 129 211 68 158 135 93 230 60 65 116 254 204 67 44 51 135 230 88 198 141 156 108 63 84 164 119 240 224 121 168 216 116 250 191 58 237 77 8 206 134 65 222 198 40 119 202 76 204 153 234 123 241 135 13 172 251 1 247 169 206 184 215 63 225 3 17 88 238 215 197 97 50 101 130 146 46 45 185 163 18 219 174 182 247 73 209 62 195 139 154 92 248 203 138 131 45 122 186 187 151 25 27 185 110 251 3 99 206 85 187 246 176 56 215 87 100 132 69 112 56 60 137 194 229 161 69 124 137 207 251 28 66 10 228 3 176 3 23 219 183 34 37 49 87 85 153 145 186 194 45 10 136 245 224 25 99 67 115 65 7 198 99 225 167 210 220 166 133 137 168 233 68 250 215 232 149 89 50 164 44 92 227 83 81 231 127 108 61 104 245 247 247 14 206 23 62 156 117 80 240 238 152 126 143 177 208 127 238 238 84 235 239 218 117 4 149 32 167 129 98 106 210 103 90 103 163 58 166 1 232 180 145 173 22 254 53 217 74 239 128 35 113 83 94 71 39 87 245 83 118 78 29 19 37 1 133 105 81 163 77 25 97 117 221 198 186 157 81 149 144 30 183 208 158 12 90 211 144 92 38 98 7 106 165 14 113 128 224 130 230 37 175 62 189 14 61 124 105 81 37 222 147 186 6 100 218 71 77 241 78 198 224 51 97 3 128 104 126 126 77 94 165 113 52 83 2 226 237 224 14 2 91 218 110 238 160 210 183 121 32 158 3 223 233 219 247 79 112 106 219 78 111 21 158 187 84 31 70 224 135 77 189 248 216 223 27 65 16 218 129 135 37 147 255 112 191 228 120 148 89 30 211 69 113 142 184 0 89 28 65 21 188 251 28 8 40 20 182 248 95 223 110 235 39 25 175 125 204 130 223 32 96 41 233 76 42 197 3 101 191 197 178 194 218 231 211 145 147 157 201 179 22 46 130 243 49 121 253 8 240 146 163 167 154 233 91 234 114 71 105 239 71 81 122 148 237 140 26 238 123 61 39 52 207 39 126 8 154 254 208 2 55 180 3 39 179 55 64 205 199 70 29 24 38 207 74 152 32 190 252 53 115 178 111 212 179 179 201 183 113 72 0 225 30 20 23 18 60 111 187 123 212 152 19 116 153 126 6 194 231 55 239 71 244 93 10 199 248 228 144 71 174 171 191 157 42 234 15 118 3 84 49 33 253 231 34 63 12 106 26 199 168 41 156 253 143 234 180 45 196 36 103 231 233 187 201 142 148 33 213 213 8 153 76 245 145 0 22 32 174 94 121 20 214 207 60 26 228 190 101 179 191 141 100 174 6 75 155 130 149 242 84 190 28 147 66 218 212 104 160 93 47 102 40 122 136 175 229 214 181 22 192 148 159 108 153 32 187 136 80 69 173 6 127 6 120 248 228 196 160 113 137 208 103 27 174 45 21 20 253 110 183 31 159 114 163 158 69 53 20 34 205 22 253 169 253 23 93 73 68 126 124 250 169 157 198 133 199 51 217 250 81 227 153 99 40 195 181 59 76 182 151 118 94 126 213 167 209 191 161 214 38 238 228 121 238 0 122 233 19 110 152 133 115 93 211 200 119 239 112 209 231 2 163 69 235 165 64 82 37 27 174 200 46 254 9 87 217 199 132 140 85 33 152 150 232 111 84 2 7 173 241 189 166 50 230 21 44 202 150 176 79 243 123 178 27 98 105 28 186 247 101 197 240 77 220 240 253 155 201 109 174 3 215 129 109 63 250 28 88 94 174 242 237 14 165 96 241 176 199 39 143 101 107 232 33 126 133 102 231 240 86 180 113 148 98 238 156 226 1 96 25 43 223 17 97 29 107 22 47 182 211 237 126 249 22 39 63 71 141 123 214 109 77 1 121 3 215 242 99 8 15 95 159 26 14 240 67 227 249 24 14 251 11 70 227 151 69 111 168 59 236 30 148 59 74 207 205 216 13 101 81 13 151 242 199 236 24 225 108 107 155 87 17 56 97 169 66 139 163 68 82 75 90 16 170 91 39 21 191 137 104 133 16 75 190 197 234 213 177 79 195 152 32 248 0 78 127 144 170 185 146 53 113 82 83 0 214 143 151 211 206 191 185 151 185 100 191 168 160 223 185 124 183 94 14 64 112 139 162 36 239 29 217 10 187 31 1 137 123 173 21 72 117 54 248 186 29 180 88 20 81 19 242 231 207 112 166 34 28 109 55 221 115 182 180 175 66 182 31 57 77 217 68 27 71 108 239 224 227 59 12 211 17 178 49 211 42 224 84 45 23 219 4 157 42 52 151 102 141 227 163 153 246 12 231 20 89 97 39 205 212 42 58 48 174 241 146 139 35 121 93 107 32 107 126 86 61 168 204 219 219 18 100 30 49 169 102 16 219 195 5 59 18 185 214 39 123 44 41 69 151 149 52 212 77 151 152 144 122 114 254 109 162 208 55 27 193 33 64 110 127 130 186 55 21 169 131 206 99 230 117 11 36 239 40 57 62 70 222 132 90 88 16 155 118 154 180 25 176 92] {
  set set [md5::md5 -hex $set]
  set $set $wat
}



set unfanciness 0
for {set n 0} {$n < $definitely_not_flag_length} {incr n} {
  set set [md5::md5 -hex set]
  set epic 0
  for {set k 0} {$k < $definitely_not_flag_length} {incr k} {
    if {$k == 0} {
      for {set i 0} {$i < [expr (($n+3)*$n+1)/2]} {incr i} {
        set set [md5::md5 -hex $set];
      }
    }
    set epic [expr $epic + $[subst $set] * [lindex $input [expr $definitely_not_flag_length - 1 - $k]]]
    set offset [expr $n + $k + 1]
    if { $k >= [expr $definitely_not_flag_length - $n - 1] } {
      set offset [expr $definitely_not_flag_length * 2 - $offset - 1]
    }
    for {set i 0} {$i < $offset} {incr i} {
      set set [md5::md5 -hex $set]
    }
  }
  set unfanciness [expr $unfanciness | $epic ^ [lindex $wtf $n]]
}
if {$unfanciness == 0} {
  puts "Wow, you must be quite fancy. Exquisite job!"
} else {
  puts "That's not very fancy. Throw it away!"
}